'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ForceReply = exports.InlineKeyboardMarkup = exports.InlineKeyboardButton = exports.ReplyKeyboardHide = exports.ReplyKeyboardMarkup = exports.KeyboardButton = undefined;

var _tcomb = require('tcomb');

var _tcomb2 = _interopRequireDefault(_tcomb);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var KeyboardButton = exports.KeyboardButton = _tcomb2.default.struct({
  text: _tcomb2.default.String,
  request_contact: _tcomb2.default.maybe(_tcomb2.default.Boolean),
  request_location: _tcomb2.default.maybe(_tcomb2.default.Boolean)
});

var ReplyKeyboardMarkup = exports.ReplyKeyboardMarkup = _tcomb2.default.struct({
  keyboard: _tcomb2.default.list(_tcomb2.default.list(KeyboardButton)),
  resize_keyboard: _tcomb2.default.maybe(_tcomb2.default.Boolean),
  one_time_keyboard: _tcomb2.default.maybe(_tcomb2.default.Boolean),
  selective: _tcomb2.default.maybe(_tcomb2.default.Boolean)
});

var ReplyKeyboardHide = exports.ReplyKeyboardHide = _tcomb2.default.struct({
  hide_keyboard: _tcomb2.default.Boolean,
  selective: _tcomb2.default.maybe(_tcomb2.default.Boolean)
});

var InlineKeyboardButton = exports.InlineKeyboardButton = _tcomb2.default.struct({
  text: _tcomb2.default.String,
  url: _tcomb2.default.maybe(_tcomb2.default.String),
  callback_data: _tcomb2.default.maybe(_tcomb2.default.String),
  switch_inline_query: _tcomb2.default.maybe(_tcomb2.default.String)
});

var InlineKeyboardMarkup = exports.InlineKeyboardMarkup = _tcomb2.default.struct({
  inline_keyboard: _tcomb2.default.list(_tcomb2.default.list(InlineKeyboardButton))
});

var ForceReply = exports.ForceReply = _tcomb2.default.struct({
  force_reply: _tcomb2.default.Boolean,
  selective: _tcomb2.default.maybe(_tcomb2.default.Boolean)
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90eXBlcy9rZXlib2FyZC10eXBlcy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7Ozs7OztBQUVPLElBQU0sMENBQWlCLGdCQUFFLE1BQUYsQ0FBUztBQUNyQyxRQUFNLGdCQUFFLE1BRDZCO0FBRXJDLG1CQUFpQixnQkFBRSxLQUFGLENBQVEsZ0JBQUUsT0FBVixDQUZvQjtBQUdyQyxvQkFBa0IsZ0JBQUUsS0FBRixDQUFRLGdCQUFFLE9BQVY7QUFIbUIsQ0FBVCxDQUF2Qjs7QUFNQSxJQUFNLG9EQUFzQixnQkFBRSxNQUFGLENBQVM7QUFDMUMsWUFBVSxnQkFBRSxJQUFGLENBQU8sZ0JBQUUsSUFBRixDQUFPLGNBQVAsQ0FBUCxDQURnQztBQUUxQyxtQkFBaUIsZ0JBQUUsS0FBRixDQUFRLGdCQUFFLE9BQVYsQ0FGeUI7QUFHMUMscUJBQW1CLGdCQUFFLEtBQUYsQ0FBUSxnQkFBRSxPQUFWLENBSHVCO0FBSTFDLGFBQVcsZ0JBQUUsS0FBRixDQUFRLGdCQUFFLE9BQVY7QUFKK0IsQ0FBVCxDQUE1Qjs7QUFPQSxJQUFNLGdEQUFvQixnQkFBRSxNQUFGLENBQVM7QUFDeEMsaUJBQWUsZ0JBQUUsT0FEdUI7QUFFeEMsYUFBVyxnQkFBRSxLQUFGLENBQVEsZ0JBQUUsT0FBVjtBQUY2QixDQUFULENBQTFCOztBQUtBLElBQU0sc0RBQXVCLGdCQUFFLE1BQUYsQ0FBUztBQUMzQyxRQUFNLGdCQUFFLE1BRG1DO0FBRTNDLE9BQUssZ0JBQUUsS0FBRixDQUFRLGdCQUFFLE1BQVYsQ0FGc0M7QUFHM0MsaUJBQWUsZ0JBQUUsS0FBRixDQUFRLGdCQUFFLE1BQVYsQ0FINEI7QUFJM0MsdUJBQXFCLGdCQUFFLEtBQUYsQ0FBUSxnQkFBRSxNQUFWO0FBSnNCLENBQVQsQ0FBN0I7O0FBT0EsSUFBTSxzREFBdUIsZ0JBQUUsTUFBRixDQUFTO0FBQzNDLG1CQUFpQixnQkFBRSxJQUFGLENBQU8sZ0JBQUUsSUFBRixDQUFPLG9CQUFQLENBQVA7QUFEMEIsQ0FBVCxDQUE3Qjs7QUFJQSxJQUFNLGtDQUFhLGdCQUFFLE1BQUYsQ0FBUztBQUNqQyxlQUFhLGdCQUFFLE9BRGtCO0FBRWpDLGFBQVcsZ0JBQUUsS0FBRixDQUFRLGdCQUFFLE9BQVY7QUFGc0IsQ0FBVCxDQUFuQiIsImZpbGUiOiJrZXlib2FyZC10eXBlcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0IGZyb20gJ3Rjb21iJ1xuXG5leHBvcnQgY29uc3QgS2V5Ym9hcmRCdXR0b24gPSB0LnN0cnVjdCh7XG4gIHRleHQ6IHQuU3RyaW5nLFxuICByZXF1ZXN0X2NvbnRhY3Q6IHQubWF5YmUodC5Cb29sZWFuKSxcbiAgcmVxdWVzdF9sb2NhdGlvbjogdC5tYXliZSh0LkJvb2xlYW4pXG59KVxuXG5leHBvcnQgY29uc3QgUmVwbHlLZXlib2FyZE1hcmt1cCA9IHQuc3RydWN0KHtcbiAga2V5Ym9hcmQ6IHQubGlzdCh0Lmxpc3QoS2V5Ym9hcmRCdXR0b24pKSxcbiAgcmVzaXplX2tleWJvYXJkOiB0Lm1heWJlKHQuQm9vbGVhbiksXG4gIG9uZV90aW1lX2tleWJvYXJkOiB0Lm1heWJlKHQuQm9vbGVhbiksXG4gIHNlbGVjdGl2ZTogdC5tYXliZSh0LkJvb2xlYW4pXG59KVxuXG5leHBvcnQgY29uc3QgUmVwbHlLZXlib2FyZEhpZGUgPSB0LnN0cnVjdCh7XG4gIGhpZGVfa2V5Ym9hcmQ6IHQuQm9vbGVhbixcbiAgc2VsZWN0aXZlOiB0Lm1heWJlKHQuQm9vbGVhbilcbn0pXG5cbmV4cG9ydCBjb25zdCBJbmxpbmVLZXlib2FyZEJ1dHRvbiA9IHQuc3RydWN0KHtcbiAgdGV4dDogdC5TdHJpbmcsXG4gIHVybDogdC5tYXliZSh0LlN0cmluZyksXG4gIGNhbGxiYWNrX2RhdGE6IHQubWF5YmUodC5TdHJpbmcpLFxuICBzd2l0Y2hfaW5saW5lX3F1ZXJ5OiB0Lm1heWJlKHQuU3RyaW5nKVxufSlcblxuZXhwb3J0IGNvbnN0IElubGluZUtleWJvYXJkTWFya3VwID0gdC5zdHJ1Y3Qoe1xuICBpbmxpbmVfa2V5Ym9hcmQ6IHQubGlzdCh0Lmxpc3QoSW5saW5lS2V5Ym9hcmRCdXR0b24pKVxufSlcblxuZXhwb3J0IGNvbnN0IEZvcmNlUmVwbHkgPSB0LnN0cnVjdCh7XG4gIGZvcmNlX3JlcGx5OiB0LkJvb2xlYW4sXG4gIHNlbGVjdGl2ZTogdC5tYXliZSh0LkJvb2xlYW4pXG59KVxuIl19